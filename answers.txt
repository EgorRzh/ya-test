1. +
    Функциональность
    Простой синтаксис
    Прототипированность
    Динамическая типизация
    Скорость работы (в последнее время)
    Быстро развивается с постепенным исправлением минусов
    Популярность
   
   -
    Возможность работать с бинарными данными только при помощи сторонних API.
    Нет возможности скрыть исходный код (для кода на клиентской стороне, обфускация конечно помогает, но не без минусов)
    Позволяет создавать очень некрасивые конструкции которые при этом выполняют задачу
    Отсутствие классической реализации ООП
    Недостаточно развитая функциональность массивов

2. Доктайп это декларация используемого типа документа (DTD - Document Type Definition). По сути говорит браузеру что это за тип документа. Так некорректное указание доктайпа приводит к переключению IE в режим совместимости (quircks mode).

3. Graceful degradation - понятие описываеющее создание web интерфеса путем упрощения внешнего вида при отсутствии поддержки каких-либо технологий. Например для скругленных углов блока применяется CSS3 свойство border-radius. Соответственно в браухерах, в которых это свойство нереализованно блок будет иметь острые углы. Недостатком метода является то что разработка ведется от наилучшей поддержки, т.е. сначала сделаем максимально красиво, а грамотную поддержку работы страницы для старых браузеров и случаев ограниченной функциональности (JS отключен) будем делать по остаточному принципу.
Progrssive enhancement же требует вести разработку от простого к сложному, грубо говоря, перевернутый graceful degradation. На примере формы первым этапом будет создание html разметки формы и ее адекватная работа с перегрузкой страницы, вторым этапом будет оформление и позиционирование при помощи свойств CSS2. Третьим этапом будет декорирование свойствами CSS3. И четвертым этапом будет подключение работы JS с AJAX. В результате получаем красивую форму для новых браузеров и доступность функционала при недоступности JS и CSS.

4. parseInt('08') === 0. Связано с тем что по спецификации функци parseInt имеет второй, необязательный аргумент - основание системы счисления. Если он равен 0 или не указан, то применются следующие правила:
  - если первыми символами идут '0x', то парсить как 16-ричное число
  - если первый символ '0', то парсить как 8-ричное.
  Отсюда и получается, что parseInt('08') парсится как восьмиричное, а значит будет равно 0, т.к. цифры 8 в восьмиричной системе нет. Такой же эффект и с parseInt('09'). Лечится указанием системы счисления. В Google Chrome эффект отсутсвует.
 
5.
  function testFunc(){
    for(var i=0; i<arguments.length; i++){
      console.log(arguments[i]);
    }
  }

6. Прототип в JS - это объект от которого наследуются свойства и методы в новом объекте.

Практичесая часть:
  Сделал событийную модель и ограничение частоты выполнения. В edm находится собственно модель, в app скрипт для тестирования нагрузки. limiter.js - это скрипт ограничения частоты выполнения функции. В app.js оставил профилирование в консоли (console.profile() console.profileEnd()).